{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport useButton from '../useButton';\nimport useListbox, { defaultListboxReducer, ActionTypes } from '../useListbox';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport useSelectChangeNotifiers from './useSelectChangeNotifiers';\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hook)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/api/use-select/)\n */\n\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open = false,\n    options,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n  const optionsMap = React.useMemo(() => {\n    const map = new Map();\n    options.forEach(option => {\n      map.set(option.value, option);\n    });\n    return map;\n  }, [options]); // prevents closing the listbox on keyUp right after opening it\n\n  const ignoreEnterKeyUp = React.useRef(false); // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n\n  const ignoreClick = React.useRef(false); // Ensure the listbox is focused after opening\n\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useSelectChangeNotifiers();\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      onOpenChange == null ? void 0 : onOpenChange(!open);\n    }\n\n    ignoreClick.current = false;\n  };\n\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      onOpenChange == null ? void 0 : onOpenChange(true);\n    }\n  };\n\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current;\n\n      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n    }\n\n    ignoreEnterKeyUp.current = false;\n  };\n\n  const createHandleListboxItemClick = React.useCallback(otherHandlers => event => {\n    var _otherHandlers$onClic2;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (!multiple) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  }, [multiple, onOpenChange]);\n\n  const createHandleListboxBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n\n    if (!event.defaultPrevented) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  };\n\n  const listboxReducer = React.useCallback((state, action) => {\n    const newState = defaultListboxReducer(state, action);\n\n    switch (action.type) {\n      case ActionTypes.keyDown:\n        // change selection when listbox is closed\n        if ((action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown') && !open && !multiple) {\n          return _extends({}, newState, {\n            selectedValues: newState.highlightedValue != null ? [newState.highlightedValue] : []\n          });\n        }\n\n        break;\n\n      case ActionTypes.blur:\n      case ActionTypes.setValue:\n      case ActionTypes.optionsChange:\n        return _extends({}, newState, {\n          highlightedValue: newState.selectedValues.length > 0 ? newState.selectedValues[0] : null\n        });\n\n      default:\n        return newState;\n    }\n\n    return newState;\n  }, [open, multiple]);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => options.map(o => o.value), [options]);\n  const isOptionDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n\n    const option = optionsMap.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [optionsMap]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = optionsMap.get(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return optionStringifier(option);\n  }, [optionsMap, optionStringifier]);\n  const useListboxParameters = {\n    defaultValue,\n    id: listboxId,\n    isOptionDisabled,\n    listboxRef: handleListboxRef,\n    onChange: (e, newValues) => {\n      if (multiple) {\n        onChange == null ? void 0 : onChange(e, newValues);\n      } else {\n        var _newValues$;\n\n        onChange == null ? void 0 : onChange(e, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n      }\n    },\n    onHighlightChange: (e, newValue) => {\n      onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);\n    },\n    options: optionValues,\n    optionStringifier: stringifyOption,\n    selectionLimit: multiple ? null : 1,\n    stateReducer: listboxReducer,\n    value\n  };\n  const {\n    getRootProps: getListboxRootProps,\n    getOptionProps: getListboxOptionProps,\n    getOptionState,\n    highlightedOption,\n    selectedOption\n  } = useListbox(useListboxParameters);\n  React.useEffect(() => {\n    notifySelectionChanged(selectedOption);\n  }, [selectedOption, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedOption);\n  }, [highlightedOption, notifyHighlightChanged]);\n\n  const getButtonProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n\n  const getListboxProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return getListboxRootProps(_extends({}, otherHandlers, {\n      onBlur: createHandleListboxBlur(otherHandlers),\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    }));\n  };\n\n  const getOptionProps = React.useCallback(function (optionValue) {\n    let otherHandlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {\n      onClick: createHandleListboxItemClick(otherHandlers)\n    }));\n  }, [getListboxOptionProps, createHandleListboxItemClick]);\n  React.useDebugValue({\n    selectedOption,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    listboxRef,\n    getOptionProps,\n    getOptionState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n\n  if (props.multiple) {\n    return {\n      buttonActive,\n      buttonFocusVisible,\n      disabled,\n      getButtonProps,\n      getListboxProps,\n      contextValue,\n      open,\n      value: selectedOption,\n      highlightedOption\n    };\n  }\n\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    contextValue,\n    open,\n    value: selectedOption.length > 0 ? selectedOption[0] : null,\n    highlightedOption\n  };\n}\n\nexport default useSelect;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","useButton","useListbox","defaultListboxReducer","ActionTypes","defaultOptionStringifier","useSelectChangeNotifiers","useSelect","props","buttonRef","buttonRefProp","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","options","optionStringifier","value","valueProp","useRef","handleButtonRef","undefined","useMemo","optionsMap","map","Map","forEach","option","set","ignoreEnterKeyUp","ignoreClick","listboxFocusRequested","requestListboxFocus","useState","focusListboxIfRequested","useCallback","current","focus","handleListboxRef","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","useEffect","createHandleMouseDown","otherHandlers","event","_otherHandlers$onMous","onMouseDown","call","defaultPrevented","createHandleButtonClick","_otherHandlers$onClic","onClick","createHandleButtonKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","createHandleListboxKeyUp","_otherHandlers$onKeyU","onKeyUp","closingKeys","includes","_buttonRef$current","createHandleListboxItemClick","_otherHandlers$onClic2","createHandleListboxBlur","_otherHandlers$onBlur","onBlur","listboxReducer","state","action","newState","type","keyDown","selectedValues","highlightedValue","blur","setValue","optionsChange","length","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","ref","optionValues","o","isOptionDisabled","valueToCheck","_option$disabled","get","stringifyOption","useListboxParameters","id","e","newValues","_newValues$","newValue","selectionLimit","stateReducer","getListboxRootProps","getOptionProps","getListboxOptionProps","getOptionState","highlightedOption","selectedOption","getButtonProps","role","getListboxProps","optionValue","useDebugValue","contextValue"],"sources":["/workspace/sorigpt/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport useButton from '../useButton';\nimport useListbox, { defaultListboxReducer, ActionTypes } from '../useListbox';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport useSelectChangeNotifiers from './useSelectChangeNotifiers';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hook)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/api/use-select/)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open = false,\n    options,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const optionsMap = React.useMemo(() => {\n    const map = new Map();\n    options.forEach(option => {\n      map.set(option.value, option);\n    });\n    return map;\n  }, [options]);\n\n  // prevents closing the listbox on keyUp right after opening it\n  const ignoreEnterKeyUp = React.useRef(false);\n\n  // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n  const ignoreClick = React.useRef(false);\n\n  // Ensure the listbox is focused after opening\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useSelectChangeNotifiers();\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      onOpenChange == null ? void 0 : onOpenChange(!open);\n    }\n    ignoreClick.current = false;\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      onOpenChange == null ? void 0 : onOpenChange(true);\n    }\n  };\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current;\n      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n    }\n    ignoreEnterKeyUp.current = false;\n  };\n  const createHandleListboxItemClick = React.useCallback(otherHandlers => event => {\n    var _otherHandlers$onClic2;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (!multiple) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  }, [multiple, onOpenChange]);\n  const createHandleListboxBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n    if (!event.defaultPrevented) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  };\n  const listboxReducer = React.useCallback((state, action) => {\n    const newState = defaultListboxReducer(state, action);\n    switch (action.type) {\n      case ActionTypes.keyDown:\n        // change selection when listbox is closed\n        if ((action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown') && !open && !multiple) {\n          return _extends({}, newState, {\n            selectedValues: newState.highlightedValue != null ? [newState.highlightedValue] : []\n          });\n        }\n        break;\n      case ActionTypes.blur:\n      case ActionTypes.setValue:\n      case ActionTypes.optionsChange:\n        return _extends({}, newState, {\n          highlightedValue: newState.selectedValues.length > 0 ? newState.selectedValues[0] : null\n        });\n      default:\n        return newState;\n    }\n    return newState;\n  }, [open, multiple]);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => options.map(o => o.value), [options]);\n  const isOptionDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = optionsMap.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [optionsMap]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = optionsMap.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return optionStringifier(option);\n  }, [optionsMap, optionStringifier]);\n  const useListboxParameters = {\n    defaultValue,\n    id: listboxId,\n    isOptionDisabled,\n    listboxRef: handleListboxRef,\n    onChange: (e, newValues) => {\n      if (multiple) {\n        onChange == null ? void 0 : onChange(e, newValues);\n      } else {\n        var _newValues$;\n        onChange == null ? void 0 : onChange(e, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n      }\n    },\n    onHighlightChange: (e, newValue) => {\n      onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);\n    },\n    options: optionValues,\n    optionStringifier: stringifyOption,\n    selectionLimit: multiple ? null : 1,\n    stateReducer: listboxReducer,\n    value\n  };\n  const {\n    getRootProps: getListboxRootProps,\n    getOptionProps: getListboxOptionProps,\n    getOptionState,\n    highlightedOption,\n    selectedOption\n  } = useListbox(useListboxParameters);\n  React.useEffect(() => {\n    notifySelectionChanged(selectedOption);\n  }, [selectedOption, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedOption);\n  }, [highlightedOption, notifyHighlightChanged]);\n  const getButtonProps = (otherHandlers = {}) => {\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n  const getListboxProps = (otherHandlers = {}) => getListboxRootProps(_extends({}, otherHandlers, {\n    onBlur: createHandleListboxBlur(otherHandlers),\n    onKeyUp: createHandleListboxKeyUp(otherHandlers)\n  }));\n  const getOptionProps = React.useCallback((optionValue, otherHandlers = {}) => {\n    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {\n      onClick: createHandleListboxItemClick(otherHandlers)\n    }));\n  }, [getListboxOptionProps, createHandleListboxItemClick]);\n  React.useDebugValue({\n    selectedOption,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    listboxRef,\n    getOptionProps,\n    getOptionState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  if (props.multiple) {\n    return {\n      buttonActive,\n      buttonFocusVisible,\n      disabled,\n      getButtonProps,\n      getListboxProps,\n      contextValue,\n      open,\n      value: selectedOption,\n      highlightedOption\n    };\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    contextValue,\n    open,\n    value: selectedOption.length > 0 ? selectedOption[0] : null,\n    highlightedOption\n  };\n}\nexport default useSelect;"],"mappings":"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"},"metadata":{},"sourceType":"module"}