{"ast":null,"code":"var _jsxFileName = \"/workspace/sorigpt/client/src/containers/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\nimport ChatComp from '../components/Chat';\nimport { SocketContext } from '../contexts/SocketContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const {\n    roomId,\n    userId\n  } = useParams();\n  const {\n    joinRoom,\n    sendMessage,\n    updateMessage\n  } = useContext(SocketContext);\n  const [messages, setMessages] = useState([]);\n  const navigate = useNavigate();\n\n  const addMessage = message => {\n    setMessages(prev => prev.concat(message));\n  };\n\n  useEffect(() => {\n    try {\n      joinRoom({\n        userId,\n        roomId\n      });\n      updateMessage(addMessage);\n    } catch {\n      navigate('/');\n    }\n  }, []);\n\n  const getChatbotReply = async userMessage => {\n    try {\n      const response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n        message: userMessage\n      });\n\n      if (response.data && response.data.reply) {\n        return response.data.reply;\n      } else {\n        throw new Error('Invalid server response');\n      }\n    } catch (error) {\n      console.error(`Error while calling chatbot API: ${error.message}`);\n      return 'Error: Failed to get a reply from chatbot.';\n    }\n  };\n\n  const submitMessage = async message => {\n    if (message.trim()) {\n      sendMessage({\n        roomId,\n        userId,\n        message\n      });\n      const chatbotReply = await getChatbotReply(message);\n      sendMessage({\n        roomId,\n        userId: 'accio',\n        message: chatbotReply\n      });\n    } else {\n      toast.error(\"메세지를 입력해주세요.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatComp, {\n    submitMessage: submitMessage,\n    messages: messages,\n    myId: userId\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Chat, \"5I28cctk6sQ5jqdrwLTYQ9cm0to=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useContext","useParams","useNavigate","toast","axios","ChatComp","SocketContext","Chat","roomId","userId","joinRoom","sendMessage","updateMessage","messages","setMessages","navigate","addMessage","message","prev","concat","getChatbotReply","userMessage","response","post","data","reply","Error","error","console","submitMessage","trim","chatbotReply"],"sources":["/workspace/sorigpt/client/src/containers/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\n\nimport ChatComp from '../components/Chat';\nimport { SocketContext } from '../contexts/SocketContext';\n\nconst Chat = () => {\n    const { roomId, userId } = useParams();\n    const { joinRoom, sendMessage, updateMessage } = useContext(SocketContext);\n    const [ messages, setMessages ] = useState([]);\n    const navigate = useNavigate();\n    \n    const addMessage = (message) => {\n        setMessages((prev) => prev.concat(message));\n    }\n        \n    useEffect(() => {\n        try {\n            joinRoom({userId, roomId});\n            updateMessage(addMessage);\n        } catch {\n            navigate('/');\n        }\n    }, []);\n\t\n\tconst getChatbotReply = async (userMessage) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n\t\t\t\tmessage: userMessage,\n\t\t\t});\n\n\t\t\tif (response.data && response.data.reply) {\n\t\t\t\treturn response.data.reply;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t  console.error(`Error while calling chatbot API: ${error.message}`);\n\t\t\t  return 'Error: Failed to get a reply from chatbot.';\n\t\t}\n\t};\n    \n    const submitMessage = async (message) => {\n        if(message.trim()) {\n            sendMessage({roomId, userId, message});\n\t\t\tconst chatbotReply = await getChatbotReply(message);\n      \t\tsendMessage({ roomId, userId: 'accio', message: chatbotReply });\n        } else {\n            toast.error(\"메세지를 입력해주세요.\")\n        }\n        \n    }\n    \n    return (<ChatComp submitMessage={submitMessage} messages={messages} myId={userId}/>);\n}\n\nexport default Chat;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,kBAAvC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,aAAT,QAA8B,2BAA9B;;;AAEA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACf,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAqBR,SAAS,EAApC;EACA,MAAM;IAAES,QAAF;IAAYC,WAAZ;IAAyBC;EAAzB,IAA2CZ,UAAU,CAACM,aAAD,CAA3D;EACA,MAAM,CAAEO,QAAF,EAAYC,WAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAMgB,QAAQ,GAAGb,WAAW,EAA5B;;EAEA,MAAMc,UAAU,GAAIC,OAAD,IAAa;IAC5BH,WAAW,CAAEI,IAAD,IAAUA,IAAI,CAACC,MAAL,CAAYF,OAAZ,CAAX,CAAX;EACH,CAFD;;EAIAnB,SAAS,CAAC,MAAM;IACZ,IAAI;MACAY,QAAQ,CAAC;QAACD,MAAD;QAASD;MAAT,CAAD,CAAR;MACAI,aAAa,CAACI,UAAD,CAAb;IACH,CAHD,CAGE,MAAM;MACJD,QAAQ,CAAC,GAAD,CAAR;IACH;EACJ,CAPQ,EAON,EAPM,CAAT;;EASH,MAAMK,eAAe,GAAG,MAAOC,WAAP,IAAuB;IAC9C,IAAI;MACH,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,4CAAX,EAAyD;QAC/EN,OAAO,EAAEI;MADsE,CAAzD,CAAvB;;MAIA,IAAIC,QAAQ,CAACE,IAAT,IAAiBF,QAAQ,CAACE,IAAT,CAAcC,KAAnC,EAA0C;QACzC,OAAOH,QAAQ,CAACE,IAAT,CAAcC,KAArB;MACA,CAFD,MAEO;QACN,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;MACA;IACD,CAVD,CAUE,OAAOC,KAAP,EAAc;MACbC,OAAO,CAACD,KAAR,CAAe,oCAAmCA,KAAK,CAACV,OAAQ,EAAhE;MACA,OAAO,4CAAP;IACF;EACD,CAfD;;EAiBG,MAAMY,aAAa,GAAG,MAAOZ,OAAP,IAAmB;IACrC,IAAGA,OAAO,CAACa,IAAR,EAAH,EAAmB;MACfnB,WAAW,CAAC;QAACH,MAAD;QAASC,MAAT;QAAiBQ;MAAjB,CAAD,CAAX;MACT,MAAMc,YAAY,GAAG,MAAMX,eAAe,CAACH,OAAD,CAA1C;MACKN,WAAW,CAAC;QAAEH,MAAF;QAAUC,MAAM,EAAE,OAAlB;QAA2BQ,OAAO,EAAEc;MAApC,CAAD,CAAX;IACC,CAJD,MAIO;MACH5B,KAAK,CAACwB,KAAN,CAAY,cAAZ;IACH;EAEJ,CATD;;EAWA,oBAAQ,QAAC,QAAD;IAAU,aAAa,EAAEE,aAAzB;IAAwC,QAAQ,EAAEhB,QAAlD;IAA4D,IAAI,EAAEJ;EAAlE;IAAA;IAAA;IAAA;EAAA,QAAR;AACH,CAhDD;;GAAMF,I;UACyBN,S,EAGVC,W;;;KAJfK,I;AAkDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}