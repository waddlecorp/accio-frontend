{"ast":null,"code":"var _jsxFileName = \"/workspace/sorigpt/client/src/containers/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\nimport ChatComp from '../components/Chat';\nimport { SocketContext } from '../contexts/SocketContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const {\n    roomId,\n    userId\n  } = useParams();\n  const {\n    joinRoom,\n    sendMessage,\n    updateMessage\n  } = useContext(SocketContext);\n  const [messages, setMessages] = useState([]);\n  const [isGeneratingAnswer, setIsGeneratingAnswer] = useState(false);\n  const navigate = useNavigate(); //const inputRef = useRef(null);\n  // if (!roomId || !userId) {\n  // roomId = localStorage.getItem(\"roomId\");\n  // userId = localStorage.getItem(\"userId\");\n  // }\n\n  const addMessage = message => {\n    setMessages(prev => prev.concat(message));\n  };\n\n  const fetchChatHistory = async () => {\n    console.log(\"flag1\", roomId, userId);\n\n    try {\n      const response = await axios.post('https://accio-server.run.goorm.app/chatHistory', {\n        userNick: roomId,\n        userPW: userId\n      });\n      console.log(response.data);\n\n      if (response.data) {\n        console.log(\"response: \", response.data);\n        const formattedChatHistory = response.data.res.map((chat, index) => {\n          return {\n            userId: chat.role === 'user' ? userId : 'Accio',\n            message: chat.content\n          };\n        });\n        setMessages(formattedChatHistory);\n      } else {\n        throw new Error('Invalid server response');\n      }\n    } catch (error) {\n      console.error(`Error while fetching chat history: ${error.message}`); //toast.error('이전 대화내역 불러오기를 실패했습니다..');\n    }\n  };\n\n  useEffect(() => {\n    // if (!roomId || !userId) {\n    // \tnavigate('/');\n    // } else {\n    // \t// Save roomId and userId to localStorage\n    // \tlocalStorage.setItem(\"roomId\", roomId);\n    // \tlocalStorage.setItem(\"userId\", userId);\n    try {\n      joinRoom({\n        userId,\n        roomId\n      });\n      updateMessage(addMessage);\n      fetchChatHistory();\n    } catch {\n      navigate('/');\n    } // }\n\n  }, []);\n\n  const getChatbotReply = async (userMessage, roomId, userId) => {\n    const token = localStorage.getItem(\"token\");\n    console.log('token: ', token);\n\n    if (token == null) {\n      console.log(userMessage, roomId, userId, token, \"token exists\");\n      setIsGeneratingAnswer(true);\n      const response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n        message: userMessage,\n        userNick: roomId,\n        userPW: userId,\n        token: token\n      });\n      setIsGeneratingAnswer(false);\n\n      if (response.data && response.data.reply) {\n        return response.data.reply;\n      } else {\n        throw new Error('Invalid server response');\n      }\n    } else {\n      const getTokenRes = await axios.post('https://accio-server.run.goorm.app/getToken', {\n        userNick: roomId,\n        userPW: userId\n      });\n\n      if (getTokenRes.data && getTokenRes.data.token) {\n        const newToken = getTokenRes.data.token;\n      } else {\n        throw new Error('Invalid Token');\n        const newToken = '';\n      }\n\n      localStorage.setItem(\"token\", newToken); //test code\n\n      const test = localStorage.getItem(\"token\");\n      console.log('localstorage: ', test);\n      console.log(userMessage, roomId, userId, newToken, \"token not exist\");\n      setIsGeneratingAnswer(true);\n      const response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n        message: userMessage,\n        userNick: roomId,\n        userPW: userId,\n        token: token\n      });\n      setIsGeneratingAnswer(false);\n\n      if (response.data && response.data.reply) {\n        return response.data.reply;\n      } else {\n        throw new Error('Invalid server response');\n      }\n    }\n\n    try {} catch (error) {\n      console.error(`Error while calling chatbot API: ${error.message}`);\n      return '현재 서버 이용량이 많아 일시적으로 이용이 제한될 수 있습니다. 잠시 후에 다시 이용해주세요.';\n    }\n  };\n\n  const submitMessage = async message => {\n    if (message.trim()) {\n      sendMessage({\n        roomId,\n        userId,\n        message\n      });\n      const chatbotReply = await getChatbotReply(message, roomId, userId);\n      sendMessage({\n        roomId,\n        userId: 'Accio',\n        message: chatbotReply\n      }); //inputRef.current.focus();\n    } else {\n      toast.error(\"메세지를 입력해주세요.\");\n    }\n  };\n\n  console.log(isGeneratingAnswer);\n  return /*#__PURE__*/_jsxDEV(ChatComp, {\n    submitMessage: submitMessage,\n    messages: messages,\n    myId: userId,\n    isGeneratingAnswer: isGeneratingAnswer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Chat, \"pp75FCjlkJZYFabzjfnabOodjSE=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useContext","useRef","useParams","useNavigate","toast","axios","ChatComp","SocketContext","Chat","roomId","userId","joinRoom","sendMessage","updateMessage","messages","setMessages","isGeneratingAnswer","setIsGeneratingAnswer","navigate","addMessage","message","prev","concat","fetchChatHistory","console","log","response","post","userNick","userPW","data","formattedChatHistory","res","map","chat","index","role","content","Error","error","getChatbotReply","userMessage","token","localStorage","getItem","reply","getTokenRes","newToken","setItem","test","submitMessage","trim","chatbotReply"],"sources":["/workspace/sorigpt/client/src/containers/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useContext, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\n\nimport ChatComp from '../components/Chat';\nimport { SocketContext } from '../contexts/SocketContext';\n\nconst Chat = () => {\n    const { roomId, userId } = useParams();\n    const { joinRoom, sendMessage, updateMessage } = useContext(SocketContext);\n    const [ messages, setMessages ] = useState([]);\n\tconst [ isGeneratingAnswer, setIsGeneratingAnswer ] = useState(false);\n    const navigate = useNavigate();\n\t//const inputRef = useRef(null);\n\n\t// if (!roomId || !userId) {\n\t// roomId = localStorage.getItem(\"roomId\");\n\t// userId = localStorage.getItem(\"userId\");\n\t// }\n\t\n    const addMessage = (message) => {\n        setMessages((prev) => prev.concat(message));\n    }\n\t\n\tconst fetchChatHistory = async () => {\n\t\tconsole.log(\"flag1\", roomId, userId)\n\t\ttry {\n\t\t\tconst response = await axios.post('https://accio-server.run.goorm.app/chatHistory', {\n\t\t\t\tuserNick: roomId,\n\t\t\t\tuserPW: userId,\n\t\t\t});\n\t\t\tconsole.log(response.data)\n\t\t\tif (response.data) {\n\t\t\t\tconsole.log(\"response: \", response.data)\n\t\t\t\tconst formattedChatHistory = response.data.res.map((chat, index) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tuserId: chat.role === 'user' ? userId : 'Accio',\n\t\t\t\t\t\tmessage: chat.content,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tsetMessages(formattedChatHistory);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(`Error while fetching chat history: ${error.message}`);\n\t\t\t//toast.error('이전 대화내역 불러오기를 실패했습니다..');\n\t\t}\n\t};\n\t\n\tuseEffect(() => {\n\t\t// if (!roomId || !userId) {\n\t\t// \tnavigate('/');\n\t\t// } else {\n\t\t// \t// Save roomId and userId to localStorage\n\t\t// \tlocalStorage.setItem(\"roomId\", roomId);\n\t\t// \tlocalStorage.setItem(\"userId\", userId);\n\n\t\ttry {\n\t\t\tjoinRoom({userId, roomId});\n\t\t\tupdateMessage(addMessage);\n\t\t\tfetchChatHistory();\n\t\t} catch {\n\t\t\tnavigate('/');\n\t\t}\n\t\t// }\n\t}, []);\n\n\t\n\tconst getChatbotReply = async (userMessage, roomId, userId) => {\n\t\tconst token = localStorage.getItem(\"token\");\n\t\tconsole.log('token: ', token)\n\t\tif (token == null) {\n\t\t\tconsole.log(userMessage, roomId, userId, token, \"token exists\")\n\t\t\tsetIsGeneratingAnswer(true);\n\t\t\tconst response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n\t\t\t\tmessage: userMessage,\n\t\t\t\tuserNick: roomId,\n\t\t\t\tuserPW: userId,\n\t\t\t\ttoken: token\n\t\t\t});\n\t\t\tsetIsGeneratingAnswer(false);\n\n\t\t\tif (response.data && response.data.reply) {\n\t\t\t\treturn response.data.reply;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tconst getTokenRes = await axios.post('https://accio-server.run.goorm.app/getToken', {\n\t\t\t\tuserNick: roomId,\n\t\t\t\tuserPW: userId,\n\t\t\t});\t\t\t\t\n\t\t\tif (getTokenRes.data && getTokenRes.data.token) {\n\t\t\t\tconst newToken = getTokenRes.data.token;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid Token');\n\t\t\t\tconst newToken = '';\n\t\t\t}\n\t\t\tlocalStorage.setItem(\"token\", newToken);\n\t\t\t//test code\n\t\t\tconst test = localStorage.getItem(\"token\");\n\t\t\tconsole.log('localstorage: ', test)\n\t\t\t\n\t\t\tconsole.log(userMessage, roomId, userId, newToken, \"token not exist\")\n\t\t\tsetIsGeneratingAnswer(true);\n\t\t\tconst response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n\t\t\t\tmessage: userMessage,\n\t\t\t\tuserNick: roomId,\n\t\t\t\tuserPW: userId,\n\t\t\t\ttoken: token\n\t\t\t});\n\t\t\tsetIsGeneratingAnswer(false);\n\n\t\t\tif (response.data && response.data.reply) {\n\t\t\t\treturn response.data.reply;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\ttry {\n\t\t} catch (error) {\n\t\t\t  console.error(`Error while calling chatbot API: ${error.message}`);\n\t\t\t  return '현재 서버 이용량이 많아 일시적으로 이용이 제한될 수 있습니다. 잠시 후에 다시 이용해주세요.';\n\t\t}\n\t};\n    \n    const submitMessage = async (message) => {\n        if(message.trim()) {\n            sendMessage({roomId, userId, message});\n\t\t\tconst chatbotReply = await getChatbotReply(message, roomId, userId);\n      \t\tsendMessage({ roomId, userId: 'Accio', message: chatbotReply });\n\t\t\t//inputRef.current.focus();\n        } else {\n            toast.error(\"메세지를 입력해주세요.\")\n        }\n        \n    }\n    console.log(isGeneratingAnswer)\n    return (<ChatComp submitMessage={submitMessage} messages={messages} myId={userId} isGeneratingAnswer={isGeneratingAnswer} />);\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}