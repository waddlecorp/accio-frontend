{"ast":null,"code":"var _jsxFileName = \"/workspace/sorigpt/client/src/containers/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\nimport ChatComp from '../components/Chat';\nimport { SocketContext } from '../contexts/SocketContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const {\n    roomId,\n    userId\n  } = useParams();\n  const {\n    joinRoom,\n    sendMessage,\n    updateMessage\n  } = useContext(SocketContext);\n  const [messages, setMessages] = useState([]);\n  const [isGeneratingAnswer, setIsGeneratingAnswer] = useState(false);\n  const [isLoadingHistory, setIsLoadingHistory] = useState(true);\n  const navigate = useNavigate(); //const inputRef = useRef(null);\n  // if (!roomId || !userId) {\n  // roomId = localStorage.getItem(\"roomId\");\n  // userId = localStorage.getItem(\"userId\");\n  // }\n\n  const addMessage = message => {\n    setMessages(prev => prev.concat(message));\n  };\n\n  const fetchChatHistory = async () => {\n    console.log(\"flag1\", roomId, userId);\n\n    try {\n      setIsLoadingHistory(true);\n      const response = await axios.post('https://accio-server.run.goorm.app/chatHistory', {\n        userNick: roomId,\n        userPW: userId\n      });\n      setIsLoadingHistory(false);\n      console.log(response.data);\n\n      if (response.data) {\n        console.log(\"response: \", response.data);\n        const formattedChatHistory = response.data.res.map((chat, index) => {\n          return {\n            userId: chat.role === 'user' ? userId : 'Accio',\n            message: chat.content\n          };\n        });\n        setMessages(formattedChatHistory);\n      } else {\n        throw new Error('Invalid server response');\n      }\n    } catch (error) {\n      console.error(`Error while fetching chat history: ${error.message}`); //toast.error('이전 대화내역 불러오기를 실패했습니다..');\n    }\n  }; // useEffect(() => {\n  // \tasync function initializeChat() {\n  // \t\ttry {\n  // \t\t\tawait joinRoom({ userId, roomId });\n  // \t\t\tawait fetchChatHistory();\n  // \t\t\tupdateMessage(addMessage);\n  // \t\t} catch (error) {\n  // \t\t\tconsole.log(\"error: \", error);\n  // \t\t\tfetchChatHistory();\n  // \t\t}\n  // \t}\n  //   initializeChat();\n  // }, []);\t\n\n\n  useEffect(() => {\n    try {\n      joinRoom({\n        userId,\n        roomId\n      });\n      updateMessage(addMessage);\n      fetchChatHistory();\n    } catch (error) {\n      navigate('/');\n      console.log('error: ', error); //fetchChatHistory();\n    }\n  }, []);\n\n  const getChatbotReply = async (userMessage, roomId, userId) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      console.log('token: ', token);\n\n      if (token == null || token == undefined) {\n        console.log(userMessage, roomId, userId, \"token not exists\");\n        const getTokenRes = await axios.post('https://accio-server.run.goorm.app/getToken', {\n          userNick: roomId,\n          userPW: userId\n        });\n\n        if (getTokenRes.data && getTokenRes.data.token) {\n          const newToken = getTokenRes.data.token;\n          localStorage.setItem(\"token\", newToken);\n        } else {\n          throw new Error('Invalid Token');\n          const newToken = '';\n        } //test code\n\n\n        const test = localStorage.getItem(\"token\");\n        console.log('localstorage: ', test);\n        setIsGeneratingAnswer(true);\n        const response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n          message: userMessage,\n          userNick: roomId,\n          userPW: userId,\n          token: token\n        });\n        setIsGeneratingAnswer(false);\n\n        if (response.data && response.data.reply) {\n          return response.data.reply;\n        } else {\n          throw new Error('Invalid server response');\n        }\n      } else {\n        console.log(userMessage, roomId, userId, token, \"token exists\");\n        setIsGeneratingAnswer(true);\n        const response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n          message: userMessage,\n          userNick: roomId,\n          userPW: userId,\n          token: token\n        });\n        setIsGeneratingAnswer(false);\n\n        if (response.data && response.data.reply) {\n          return response.data.reply;\n        } else {\n          throw new Error('Invalid server response');\n        }\n      } // \t\ttry {\n\n    } catch (error) {\n      console.error(`Error while calling chatbot API: ${error.message}`);\n      return '현재 서버 이용량이 많아 일시적으로 이용이 제한될 수 있습니다. 잠시 후에 다시 이용해주세요.';\n    }\n  };\n\n  const submitMessage = async message => {\n    if (message.trim()) {\n      sendMessage({\n        roomId,\n        userId,\n        message\n      });\n      const chatbotReply = await getChatbotReply(message, roomId, userId);\n      sendMessage({\n        roomId,\n        userId: 'Accio',\n        message: chatbotReply\n      }); //inputRef.current.focus();\n    } else {\n      toast.error(\"메세지를 입력해주세요.\");\n    }\n  };\n\n  console.log(isGeneratingAnswer);\n  return /*#__PURE__*/_jsxDEV(ChatComp, {\n    submitMessage: submitMessage,\n    messages: messages,\n    myId: userId,\n    isGeneratingAnswer: isGeneratingAnswer,\n    isLoadingHistory: isLoadingHistory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Chat, \"RkPNv15taE4erNI4gWrAEpuzueM=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useContext","useRef","useParams","useNavigate","toast","axios","ChatComp","SocketContext","Chat","roomId","userId","joinRoom","sendMessage","updateMessage","messages","setMessages","isGeneratingAnswer","setIsGeneratingAnswer","isLoadingHistory","setIsLoadingHistory","navigate","addMessage","message","prev","concat","fetchChatHistory","console","log","response","post","userNick","userPW","data","formattedChatHistory","res","map","chat","index","role","content","Error","error","getChatbotReply","userMessage","token","localStorage","getItem","undefined","getTokenRes","newToken","setItem","test","reply","submitMessage","trim","chatbotReply"],"sources":["/workspace/sorigpt/client/src/containers/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useContext, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\n\nimport ChatComp from '../components/Chat';\nimport { SocketContext } from '../contexts/SocketContext';\n\nconst Chat = () => {\n    const { roomId, userId } = useParams();\n    const { joinRoom, sendMessage, updateMessage } = useContext(SocketContext);\n    const [ messages, setMessages ] = useState([]);\n\tconst [ isGeneratingAnswer, setIsGeneratingAnswer ] = useState(false);\n\tconst [ isLoadingHistory, setIsLoadingHistory ] = useState(true);\n    const navigate = useNavigate();\n\t//const inputRef = useRef(null);\n\n\t// if (!roomId || !userId) {\n\t// roomId = localStorage.getItem(\"roomId\");\n\t// userId = localStorage.getItem(\"userId\");\n\t// }\n\t\n    const addMessage = (message) => {\n        setMessages((prev) => prev.concat(message));\n    }\n\t\n\tconst fetchChatHistory = async () => {\n\t\tconsole.log(\"flag1\", roomId, userId)\n\t\ttry {\n\t\t\tsetIsLoadingHistory(true);\n\t\t\tconst response = await axios.post('https://accio-server.run.goorm.app/chatHistory', {\n\t\t\t\tuserNick: roomId,\n\t\t\t\tuserPW: userId,\n\t\t\t});\n\t\t\tsetIsLoadingHistory(false);\n\t\t\tconsole.log(response.data)\n\t\t\tif (response.data) {\n\t\t\t\tconsole.log(\"response: \", response.data)\n\t\t\t\tconst formattedChatHistory = response.data.res.map((chat, index) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tuserId: chat.role === 'user' ? userId : 'Accio',\n\t\t\t\t\t\tmessage: chat.content,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tsetMessages(formattedChatHistory);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(`Error while fetching chat history: ${error.message}`);\n\t\t\t//toast.error('이전 대화내역 불러오기를 실패했습니다..');\n\t\t}\n\t};\n\n\t// useEffect(() => {\n\t// \tasync function initializeChat() {\n\t// \t\ttry {\n\t// \t\t\tawait joinRoom({ userId, roomId });\n\t// \t\t\tawait fetchChatHistory();\n\t// \t\t\tupdateMessage(addMessage);\n\t// \t\t} catch (error) {\n\t// \t\t\tconsole.log(\"error: \", error);\n\t// \t\t\tfetchChatHistory();\n\t// \t\t}\n\t// \t}\n\n\t//   initializeChat();\n\t// }, []);\t\n\t\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tjoinRoom({userId, roomId});\n\t\t\tupdateMessage(addMessage);\n\t\t\tfetchChatHistory();\n\t\t} catch (error) {\n\t\t\tnavigate('/');\n\t\t\tconsole.log('error: ', error)\n\t\t\t//fetchChatHistory();\n\n\t\t}\n\t}, []);\n\n\t\n\tconst getChatbotReply = async (userMessage, roomId, userId) => {\n\t\ttry{\n\t\t\tconst token = localStorage.getItem(\"token\");\n\t\t\tconsole.log('token: ', token)\n\t\t\tif (token == null || token == undefined) {\n\t\t\t\tconsole.log(userMessage, roomId, userId, \"token not exists\")\n\t\t\t\tconst getTokenRes = await axios.post('https://accio-server.run.goorm.app/getToken', {\n\t\t\t\t\tuserNick: roomId,\n\t\t\t\t\tuserPW: userId,\n\t\t\t\t});\t\t\t\t\n\t\t\t\tif (getTokenRes.data && getTokenRes.data.token) {\n\t\t\t\t\tconst newToken = getTokenRes.data.token;\n\t\t\t\t\tlocalStorage.setItem(\"token\", newToken);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Invalid Token');\n\t\t\t\t\tconst newToken = '';\n\t\t\t\t}\n\t\t\t\t//test code\n\t\t\t\tconst test = localStorage.getItem(\"token\");\n\t\t\t\tconsole.log('localstorage: ', test)\n\n\n\t\t\t\tsetIsGeneratingAnswer(true);\n\t\t\t\tconst response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n\t\t\t\t\tmessage: userMessage,\n\t\t\t\t\tuserNick: roomId,\n\t\t\t\t\tuserPW: userId,\n\t\t\t\t\ttoken: token\n\t\t\t\t});\n\t\t\t\tsetIsGeneratingAnswer(false);\n\n\t\t\t\tif (response.data && response.data.reply) {\n\t\t\t\t\treturn response.data.reply;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t\t}\t\t\t\n\n\t\t\t} else {\n\t\t\t\tconsole.log(userMessage, roomId, userId, token, \"token exists\")\n\t\t\t\tsetIsGeneratingAnswer(true);\n\t\t\t\tconst response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n\t\t\t\t\tmessage: userMessage,\n\t\t\t\t\tuserNick: roomId,\n\t\t\t\t\tuserPW: userId,\n\t\t\t\t\ttoken: token\n\t\t\t\t});\n\t\t\t\tsetIsGeneratingAnswer(false);\n\n\t\t\t\tif (response.data && response.data.reply) {\n\t\t\t\t\treturn response.data.reply;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t\t}\n\n\t\t\t}\n\t\t\n// \t\ttry {\n\t\t} catch (error) {\n\t\t\t  console.error(`Error while calling chatbot API: ${error.message}`);\n\t\t\t  return '현재 서버 이용량이 많아 일시적으로 이용이 제한될 수 있습니다. 잠시 후에 다시 이용해주세요.';\n\t\t}\n\t};\n    \n    const submitMessage = async (message) => {\n        if(message.trim()) {\n            sendMessage({roomId, userId, message});\n\t\t\tconst chatbotReply = await getChatbotReply(message, roomId, userId);\n      \t\tsendMessage({ roomId, userId: 'Accio', message: chatbotReply });\n\t\t\t//inputRef.current.focus();\n        } else {\n            toast.error(\"메세지를 입력해주세요.\")\n        }\n        \n    }\n    console.log(isGeneratingAnswer)\n    return (<ChatComp submitMessage={submitMessage} messages={messages} myId={userId} isGeneratingAnswer={isGeneratingAnswer} isLoadingHistory={isLoadingHistory} />);\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}