{"ast":null,"code":"var _jsxFileName = \"/workspace/sorigpt/client/src/contexts/SocketContext.jsx\",\n    _s = $RefreshSig$();\n\n// import { useEffect, createContext, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n// export const SocketContext = createContext();\n// export const SocketContextProvider = ({ children }) => {\n//   // const socketRef = useRef();\n//   // useEffect(() => {\n//   //   socketRef.current = io(process.env.REACT_APP_SERVER_URL, () => {\n//   //     console.log(\"Socket connected\");\n//   //   });\n//   //   return () => {\n//   //     socketRef.current.disconnect();\n//   //   };\n//   // }, []);\n//   const [socket, setSocket] = useState(null);\n//   useEffect(() => {\n//     const newSocket = io(process.env.REACT_APP_SERVER_URL);\n//     setSocket(newSocket);\n//     return () => {\n//       newSocket.disconnect();\n//     };\n//   }, []);\n//   const joinRoom = async ({ roomId, userId }) => {\n//     socket && socket.emit(\"JOIN_ROOM\", { userId, roomId });\n//   };\n//   const sendMessage = ({ roomId, userId, message }) => {\n//     socket && socket.emit(\"SEND_MESSAGE\", { roomId, userId, message });\n//   };\n//   const updateMessage = (func) => {\n//     socket && socket.on(\"UPDATE_MESSAGE\", (msg) => func(msg));\n//   };\n//   // const joinRoom = async ({ roomId, userId }) => {\n//   //   if (socketRef.current) {\n//   //     socketRef.current.emit(\"JOIN_ROOM\", { userId, roomId });\n//   //   }\n//   // };\n//   // const sendMessage = ({ roomId, userId, message }) => {\n//   //   if (socketRef.current) {\n//   //     socketRef.current.emit(\"SEND_MESSAGE\", { roomId, userId, message });\n//   //   }\n//   // };\n//   // const updateMessage = (func) => {\n//   //   if (socketRef.current) {\n//   //     socketRef.current.on(\"UPDATE_MESSAGE\", (msg) => func(msg));\n//   //   }\n//   // };\n//   return (\n//     <SocketContext.Provider value={{ joinRoom, sendMessage, updateMessage }}>\n//       {children}\n//     </SocketContext.Provider>\n//   );\n// };\nimport { useEffect, createContext } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SocketContext = /*#__PURE__*/createContext();\nexport const SocketContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let socket;\n  useEffect(() => {\n    socket = io(process.env.REACT_APP_SERVER_URL);\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  const joinRoom = _ref2 => {\n    let {\n      roomId,\n      userId\n    } = _ref2;\n    socket.emit('JOIN_ROOM', {\n      userId,\n      roomId\n    });\n  };\n\n  const sendMessage = _ref3 => {\n    let {\n      roomId,\n      userId,\n      message\n    } = _ref3;\n    socket.emit('SEND_MESSAGE', {\n      roomId,\n      userId,\n      message\n    });\n  };\n\n  const updateMessage = func => {\n    socket.on('UPDATE_MESSAGE', msg => func(msg));\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      joinRoom,\n      sendMessage,\n      updateMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SocketContextProvider, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = SocketContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketContextProvider\");","map":{"version":3,"names":["useEffect","createContext","io","SocketContext","SocketContextProvider","children","socket","process","env","REACT_APP_SERVER_URL","disconnect","joinRoom","roomId","userId","emit","sendMessage","message","updateMessage","func","on","msg"],"sources":["/workspace/sorigpt/client/src/contexts/SocketContext.jsx"],"sourcesContent":["// import { useEffect, createContext, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n\n// export const SocketContext = createContext();\n\n// export const SocketContextProvider = ({ children }) => {\n//   // const socketRef = useRef();\n\n//   // useEffect(() => {\n//   //   socketRef.current = io(process.env.REACT_APP_SERVER_URL, () => {\n//   //     console.log(\"Socket connected\");\n//   //   });\n//   //   return () => {\n//   //     socketRef.current.disconnect();\n//   //   };\n//   // }, []);\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     const newSocket = io(process.env.REACT_APP_SERVER_URL);\n//     setSocket(newSocket);\n\n//     return () => {\n//       newSocket.disconnect();\n//     };\n//   }, []);\n\n\n//   const joinRoom = async ({ roomId, userId }) => {\n//     socket && socket.emit(\"JOIN_ROOM\", { userId, roomId });\n//   };\n\n//   const sendMessage = ({ roomId, userId, message }) => {\n//     socket && socket.emit(\"SEND_MESSAGE\", { roomId, userId, message });\n//   };\n\n//   const updateMessage = (func) => {\n//     socket && socket.on(\"UPDATE_MESSAGE\", (msg) => func(msg));\n//   };\n\t\n//   // const joinRoom = async ({ roomId, userId }) => {\n//   //   if (socketRef.current) {\n//   //     socketRef.current.emit(\"JOIN_ROOM\", { userId, roomId });\n//   //   }\n//   // };\n\n//   // const sendMessage = ({ roomId, userId, message }) => {\n//   //   if (socketRef.current) {\n//   //     socketRef.current.emit(\"SEND_MESSAGE\", { roomId, userId, message });\n//   //   }\n//   // };\n\n//   // const updateMessage = (func) => {\n//   //   if (socketRef.current) {\n//   //     socketRef.current.on(\"UPDATE_MESSAGE\", (msg) => func(msg));\n//   //   }\n//   // };\n\n//   return (\n//     <SocketContext.Provider value={{ joinRoom, sendMessage, updateMessage }}>\n//       {children}\n//     </SocketContext.Provider>\n//   );\n// };\n\n\nimport { useEffect, createContext } from \"react\";\nimport io from \"socket.io-client\";\n\nexport const SocketContext = createContext();\n\nexport const SocketContextProvider = ({children}) => {\n    let socket;\n    \n    useEffect(()=>{\n        socket = io(process.env.REACT_APP_SERVER_URL);\n        return () => {\n            socket.disconnect();\n        }\n    }, [])\n\n    const joinRoom = ({roomId, userId}) => {\n        socket.emit('JOIN_ROOM', {userId, roomId}); \n    }\n    \n    const sendMessage = ({roomId, userId, message}) => {\n        socket.emit('SEND_MESSAGE', {roomId, userId, message});\n    }\n    \n    const updateMessage = (func) => {\n        socket.on('UPDATE_MESSAGE', (msg) => func(msg));\n    }\n\n    \n    return (\n        <SocketContext.Provider value={{joinRoom, sendMessage, updateMessage}}>\n            {children}\n        </SocketContext.Provider>\n    );\n}"],"mappings":";;;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,SAAT,EAAoBC,aAApB,QAAyC,OAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,EAAnC;AAEP,OAAO,MAAMG,qBAAqB,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EACjD,IAAIC,MAAJ;EAEAN,SAAS,CAAC,MAAI;IACVM,MAAM,GAAGJ,EAAE,CAACK,OAAO,CAACC,GAAR,CAAYC,oBAAb,CAAX;IACA,OAAO,MAAM;MACTH,MAAM,CAACI,UAAP;IACH,CAFD;EAGH,CALQ,EAKN,EALM,CAAT;;EAOA,MAAMC,QAAQ,GAAG,SAAsB;IAAA,IAArB;MAACC,MAAD;MAASC;IAAT,CAAqB;IACnCP,MAAM,CAACQ,IAAP,CAAY,WAAZ,EAAyB;MAACD,MAAD;MAASD;IAAT,CAAzB;EACH,CAFD;;EAIA,MAAMG,WAAW,GAAG,SAA+B;IAAA,IAA9B;MAACH,MAAD;MAASC,MAAT;MAAiBG;IAAjB,CAA8B;IAC/CV,MAAM,CAACQ,IAAP,CAAY,cAAZ,EAA4B;MAACF,MAAD;MAASC,MAAT;MAAiBG;IAAjB,CAA5B;EACH,CAFD;;EAIA,MAAMC,aAAa,GAAIC,IAAD,IAAU;IAC5BZ,MAAM,CAACa,EAAP,CAAU,gBAAV,EAA6BC,GAAD,IAASF,IAAI,CAACE,GAAD,CAAzC;EACH,CAFD;;EAKA,oBACI,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACT,QAAD;MAAWI,WAAX;MAAwBE;IAAxB,CAA/B;IAAA,UACKZ;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA5BM;;GAAMD,qB;;KAAAA,qB"},"metadata":{},"sourceType":"module"}