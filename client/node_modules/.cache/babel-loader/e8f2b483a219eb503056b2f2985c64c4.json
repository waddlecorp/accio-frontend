{"ast":null,"code":"var _jsxFileName = \"/workspace/sorigpt/client/src/containers/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\nimport ChatComp from '../components/Chat';\nimport { SocketContext } from '../contexts/SocketContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const {\n    roomId,\n    userId\n  } = useParams();\n  const {\n    joinRoom,\n    sendMessage,\n    updateMessage\n  } = useContext(SocketContext);\n  const [messages, setMessages] = useState([]);\n  const navigate = useNavigate();\n\n  const addMessage = message => {\n    setMessages(prev => prev.concat(message));\n  };\n\n  const fetchChatHistory = async () => {\n    try {\n      const response = await axios.post('/getChatHistory', {\n        userNick: roomId,\n        userPW: userId\n      });\n\n      if (response.data && response.data.chatHistory) {\n        const formattedChatHistory = response.data.chatHistory.map((chat, index) => {\n          return {\n            userId: chat.role === 'user' ? userId : 'Accio',\n            message: chat.content\n          };\n        });\n        setMessages(formattedChatHistory);\n      } else {\n        throw new Error('Invalid server response');\n      }\n    } catch (error) {\n      console.error(`Error while fetching chat history: ${error.message}`);\n      toast.error('Error while fetching chat history. Please try again later.');\n    }\n  };\n\n  useEffect(() => {\n    try {\n      joinRoom({\n        userId,\n        roomId\n      });\n      updateMessage(addMessage);\n      fetchChatHistory();\n    } catch {\n      navigate('/');\n    }\n  }, []);\n\n  const getChatbotReply = async (userMessage, roomId, userId) => {\n    //console.log('Calling getChatbotReply:', { userMessage, roomId, userId }); // Add this line\n    try {\n      const response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n        message: userMessage,\n        userNick: roomId,\n        userPW: userId\n      });\n\n      if (response.data && response.data.reply) {\n        return response.data.reply;\n      } else {\n        throw new Error('Invalid server response');\n      }\n    } catch (error) {\n      console.error(`Error while calling chatbot API: ${error.message}`);\n      return '현재 서버 이용량이 많아 일시적으로 이용이 제한될 수 있습니다. 잠시 후에 다시 이용해주세요.';\n    }\n  };\n\n  const submitMessage = async message => {\n    if (message.trim()) {\n      sendMessage({\n        roomId,\n        userId,\n        message\n      });\n      const chatbotReply = await getChatbotReply(message, roomId, userId);\n      sendMessage({\n        roomId,\n        userId: 'Accio',\n        message: chatbotReply\n      });\n    } else {\n      toast.error(\"메세지를 입력해주세요.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatComp, {\n    submitMessage: submitMessage,\n    messages: messages,\n    myId: userId\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Chat, \"5I28cctk6sQ5jqdrwLTYQ9cm0to=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useContext","useParams","useNavigate","toast","axios","ChatComp","SocketContext","Chat","roomId","userId","joinRoom","sendMessage","updateMessage","messages","setMessages","navigate","addMessage","message","prev","concat","fetchChatHistory","response","post","userNick","userPW","data","chatHistory","formattedChatHistory","map","chat","index","role","content","Error","error","console","getChatbotReply","userMessage","reply","submitMessage","trim","chatbotReply"],"sources":["/workspace/sorigpt/client/src/containers/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\n\nimport ChatComp from '../components/Chat';\nimport { SocketContext } from '../contexts/SocketContext';\n\nconst Chat = () => {\n    const { roomId, userId } = useParams();\n    const { joinRoom, sendMessage, updateMessage } = useContext(SocketContext);\n    const [ messages, setMessages ] = useState([]);\n    const navigate = useNavigate();\n    \n    const addMessage = (message) => {\n        setMessages((prev) => prev.concat(message));\n    }\n\t\n\tconst fetchChatHistory = async () => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/getChatHistory', {\n\t\t\t\tuserNick: roomId,\n\t\t\t\tuserPW: userId,\n\t\t\t});\n\n\t\t\tif (response.data && response.data.chatHistory) {\n\t\t\t\tconst formattedChatHistory = response.data.chatHistory.map((chat, index) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tuserId: chat.role === 'user' ? userId : 'Accio',\n\t\t\t\t\t\tmessage: chat.content,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tsetMessages(formattedChatHistory);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(`Error while fetching chat history: ${error.message}`);\n\t\t\ttoast.error('Error while fetching chat history. Please try again later.');\n\t\t}\n\t};\n\t\n    useEffect(() => {\n        try {\n            joinRoom({userId, roomId});\n            updateMessage(addMessage);\n            fetchChatHistory();\n        } catch {\n            navigate('/');\n        }\n    }, []);\n\n\t\n\tconst getChatbotReply = async (userMessage, roomId, userId) => {\n\t\t//console.log('Calling getChatbotReply:', { userMessage, roomId, userId }); // Add this line\n\t\ttry {\n\t\t\tconst response = await axios.post('https://accio-server.run.goorm.app/chatbot', {\n\t\t\t\tmessage: userMessage,\n\t\t\t\tuserNick: roomId,\n\t\t\t\tuserPW: userId\n\t\t\t});\n\n\t\t\tif (response.data && response.data.reply) {\n\t\t\t\treturn response.data.reply;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t  console.error(`Error while calling chatbot API: ${error.message}`);\n\t\t\t  return '현재 서버 이용량이 많아 일시적으로 이용이 제한될 수 있습니다. 잠시 후에 다시 이용해주세요.';\n\t\t}\n\t};\n    \n    const submitMessage = async (message) => {\n        if(message.trim()) {\n            sendMessage({roomId, userId, message});\n\t\t\tconst chatbotReply = await getChatbotReply(message, roomId, userId);\n      \t\tsendMessage({ roomId, userId: 'Accio', message: chatbotReply });\n        } else {\n            toast.error(\"메세지를 입력해주세요.\")\n        }\n        \n    }\n    \n    return (<ChatComp submitMessage={submitMessage} messages={messages} myId={userId}/>);\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}